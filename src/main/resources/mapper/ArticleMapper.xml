<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.root2z.dao.ArticleMapper">
    <resultMap id="BaseResultMap" type="com.root2z.model.entity.Article">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="introduce" jdbcType="VARCHAR" property="introduce"/>
        <result column="cover" jdbcType="VARCHAR" property="cover"/>
        <result column="author" jdbcType="VARCHAR" property="author"/>
        <result column="publish_time" jdbcType="TIMESTAMP" property="publishTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="is_top" jdbcType="INTEGER" property="isTop"/>
        <result column="is_recommend" jdbcType="INTEGER" property="isRecommend"/>
        <result column="category_id" jdbcType="INTEGER" property="categoryId"/>
    </resultMap>

    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.root2z.model.entity.Article">
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
    </resultMap>
    <sql id="Base_Column_List">
        id
        , title, cover, introduce, author, publish_time, update_time, status, is_top, is_recommend, category_id
    </sql>

    <sql id="Article_List">
        id
        ,title,cover,introduce,author,publish_time,update_time,category_id
    </sql>

    <sql id="Blob_Column_List">
        content
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from article
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from article
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.root2z.model.entity.Article" useGeneratedKeys="true" keyProperty="id">
        insert into article (id, title, cover, introduce,
                             author, publish_time, update_time,
                             status, content, is_top, is_recommend, category_id)
        values (#{id,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{cover,jdbcType=VARCHAR},
                #{introduce,jdbcType=VARCHAR},
                #{author,jdbcType=VARCHAR}, #{publishTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP},
                #{status,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR}, #{isTop,jdbcType=INTEGER},
                #{isRecommend,jdbcType=INTEGER}, #{categoryId,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="com.root2z.model.entity.Article">
        insert into article
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="title != null">
                title,
            </if>
            <if test="cover != null">
                cover,
            </if>
            <if test="introduce != null">
                introduce,
            </if>
            <if test="author != null">
                author,
            </if>
            <if test="publishTime != null">
                publish_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="isTop != null">
                is_top,
            </if>
            <if test="isRecommend != null">
                is_recommend,
            </if>
            <if test="categoryId != null">
                category_id
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="title != null">
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="cover != null">
                #{cover,jdbcType=VARCHAR},
            </if>
            <if test="introduce != null">
                #{introduce,jdbcType=VARCHAR},
            </if>
            <if test="author != null">
                #{author,jdbcType=VARCHAR},
            </if>
            <if test="publishTime != null">
                #{publishTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
            <if test="isTop != null">
                #{isTop,jdbcType=INTEGER},
            </if>
            <if test="isRecommend != null">
                #{isRecommend,jdbcType=INTEGER},
            </if>
            <if test="categoryId != null">
                #{categoryId,jdbcType=INTEGER}
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.root2z.model.entity.Article">
        update article
        <set>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="cover != null">
                cover = #{cover,jdbcType=VARCHAR},
            </if>
            <if test="introduce != null">
                introduce = #{introduce,jdbcType=VARCHAR},
            </if>
            <if test="author != null">
                author = #{author,jdbcType=VARCHAR},
            </if>
            <if test="publishTime != null">
                publish_time = #{publishTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
            <if test="isTop != null">
                is_top = #{isTop,jdbcType=INTEGER},
            </if>
            <if test="isRecommend != null">
                is_recommend = #{isRecommend,jdbcType=INTEGER},
            </if>
            <if test="categoryId != null">
                category_id = #{categoryId,jdbcType=INTEGER}
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.root2z.model.entity.Article">
        update article
        set title        = #{title,jdbcType=VARCHAR},
            cover        = #{cover,jdbcType=VARCHAR},
            introduce    = #{introduce,jdbcType=VARCHAR},
            author       = #{author,jdbcType=VARCHAR},
            publish_time = #{publishTime,jdbcType=TIMESTAMP},
            update_time  = #{updateTime,jdbcType=TIMESTAMP},
            status       = #{status,jdbcType=INTEGER},
            content      = #{content,jdbcType=LONGVARCHAR},
            is_top       = #{isTop,jdbcType=INTEGER},
            is_recommend = #{isRecommend,jdbcType=INTEGER},
            category_id  = #{categoryId,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.root2z.model.entity.Article">
        update article
        set title        = #{title,jdbcType=VARCHAR},
            cover        = #{cover,jdbcType=VARCHAR},
            introduce    = #{introduce,jdbcType=VARCHAR},
            author       = #{author,jdbcType=VARCHAR},
            publish_time = #{publishTime,jdbcType=TIMESTAMP},
            update_time  = #{updateTime,jdbcType=TIMESTAMP},
            status       = #{status,jdbcType=INTEGER},
            is_top       = #{isTop,jdbcType=INTEGER},
            is_recommend = #{isRecommend,jdbcType=INTEGER},
            category_id  = #{categoryId,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="totalCount" resultType="java.lang.Integer">
        select count(*)
        from article
    </select>
    <select id="findAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from article
    </select>

    <select id="selectAllByTop" resultMap="BaseResultMap">
        select id, title, cover
        from article
        where status = 1
          and is_top = 1 limit #{top}
    </select>

    <select id="selectAllByUpdateTime" resultMap="BaseResultMap">
        select
        <include refid="Article_List"/>
        from article where status=1 order by update_time desc
    </select>

    <select id="selectAllByRecommend" resultMap="BaseResultMap">
        select id, title, update_time
        from article
        where status = 1
          and is_recommend = 1 limit #{recommendNumber}
    </select>


    <resultMap id="ArticleMap" type="com.root2z.model.entity.Article" extends="ResultMapWithBLOBs">
        <association property="category" javaType="com.root2z.model.entity.Category">
            <id column="cid" property="id" jdbcType="INTEGER"/>
            <result column="cname" jdbcType="VARCHAR" property="name"/>
        </association>
        <collection property="tags" javaType="list" ofType="com.root2z.model.entity.Tag">
            <id column="tid" property="id" jdbcType="INTEGER"/>
            <result column="tname" property="name" jdbcType="VARCHAR"/>
        </collection>
    </resultMap>


    <select id="selectByArticleId" resultMap="ArticleMap">
        select distinct article.id,
                        article.title,
                        article.author,
                        article.publish_time,
                        article.update_time,
                        article.cover,
                        article.introduce,
                        article.content,
                        article.category_id,
                        category.id   as cid,
                        category.name as cname,
                        tag.id        as tid,
                        tag.name      as tname
        from article,
             category,
             tag,
             article_tag
        where article.id = #{articleId}
          and article.category_id = category.id
          and tag.id = article_tag.tag_id
          and article_tag.article_id = article.id;
    </select>
    <update id="updateStatusByPrimaryKey">
        update article
        set status=#{status,jdbcType=INTEGER}
        where id = #{articleId,jdbcType=INTEGER}
    </update>

    <select id="findByYear" resultMap="BaseResultMap">
        select id, title, publish_time, cover
        from article
        where date_format(publish_time, '%Y') = #{year}
          and status = 1
        order by publish_time
    </select>

    <select id="getYears" resultType="java.lang.String">
        select date_format(b.publish_time, '%Y') as year
        from article b
        where status=1
        group by date_format(b.publish_time, '%Y')
        order by year desc;
    </select>
    <select id="selectAllCategoryId" resultMap="ArticleMap">
        select distinct article.id,
                        article.title,
                        article.publish_time,
                        article.author,
                        article.cover,
                        article.introduce,
                        article.category_id,
                        category.id   as cid,
                        category.name as cname,
                        tag.id        as tid,
                        tag.name      as tname
        from article,
             category,
             article_tag,
             tag
        where article.category_id = #{categoryId}
          and category.id = #{categoryId}
          and tag.id = article_tag.tag_id
          and article_tag.article_id = article.id
          and status = 1

    </select>
    <select id="selectAllTagId" resultMap="ArticleMap">
        select distinct article.id,
                        article.title,
                        article.publish_time,
                        article.author,
                        article.cover,
                        article.introduce,
                        article.category_id,
                        category.id   as cid,
                        category.name as cname,
                        tag.id        as tid,
                        tag.name      as tname
        from article,
             category,
             article_tag,
             tag
        where article.category_id = category.id
          and tag.id = #{tagId}
          and tag.id = article_tag.tag_id
          and article_tag.article_id = article.id
          and status = 1
    </select>

</mapper>