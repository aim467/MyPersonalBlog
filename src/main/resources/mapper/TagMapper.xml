<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.root2z.dao.TagMapper">
    <resultMap id="BaseResultMap" type="com.root2z.model.entity.Tag">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
    </resultMap>
    <sql id="Base_Column_List">
        id
        , name
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from tag
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from tag
        where id = #{id,jdbcType=INTEGER}
    </delete>

    <delete id="deleteTagAndArticleTagById">
        delete
        tag, article_tag from tag left join article_tag on tag.id=article_tag.tag_id where tag.id =
        #{tagId}
    </delete>

    <insert id="insert" parameterType="java.lang.String">
        insert into tag (`name`)
        values (#{name,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.root2z.model.entity.Tag">
        insert into tag
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="name != null">
                name,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.root2z.model.entity.Tag">
        update tag
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.root2z.model.entity.Tag">
        update tag
        set name = #{name,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="totalCount" resultType="java.lang.Integer">
        select count(*)
        from tag
    </select>
    <select id="findAll" resultType="com.root2z.model.entity.Tag">
        select
        <include refid="Base_Column_List"/>
        from tag
    </select>
    <!--  批量插入 -->
    <insert id="batchInsert" parameterType="java.util.List" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into tag (name) values
        <foreach collection="list" item="tag" separator=",">
            (#{tag.name},jdbcType=VARCHAR)
        </foreach>
    </insert>

    <select id="selectByName" resultType="com.root2z.model.entity.Tag">
        select
        <include refid="Base_Column_List"/>
        from tag where name=#{name,jdbcType=VARCHAR}
    </select>

    <insert id="insertByName" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into tag (name) value (#{name,jdbcType=VARCHAR})
    </insert>

    <select id="selectNameByArticleId" resultType="java.lang.String">
        select tag.name
        from tag
        where id in (select tag_id from article_tag where article_id = #{articleId,jdbcType=INTEGER})
    </select>

    <select id="findByIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from tag where id in
        <foreach collection="existTags" item="id" separator="," open="(" close=")">
            #{id,jdbcType=INTEGER}
        </foreach>
    </select>
    <select id="selectAllByArticleId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from tag, article_tag where tag.id=article_tag.tag_id and article_tag.article_id=#{id}
    </select>

    <select id="selectAllByCount" resultType="com.root2z.model.entity.Tag">
        select tag.id, tag.name, count(article_tag.tag_id) as count
        from tag,
            article_tag
        where tag.id = article_tag.tag_id
        group by article_tag.tag_id;
    </select>
    <select id="selectId" resultType="java.lang.Integer">
        select id
        from tag limit 1
    </select>
</mapper>